@inject IJSRuntime  JS
@inject HttpClient Http
@inject SaveItem Notifier
@inject NavigationManager NavigationManager
@using WebApplication2.Shared
@using Newtonsoft.Json

@page "/UpdatePassword"

<h3>Password Settings</h3>
<p>Please Update Password</p>

<EditForm Model="PasswordChange" OnValidSubmit="HandleSubmit" OnInvalidSubmit="FailedChange">
    <div><label class="layoutinputtext">Old Password</label> <InputText class="layoutinput" @bind-Value=PasswordChange.Password /></div>
    <div><label class="layoutinputtext">New Password</label> <InputText class="layoutinput" @bind-Value=PasswordChange.NewPassword/></div>
    <button type="submit">Update</button>
</EditForm>

<dialog Invalid id="InvalidSubmit" open="@InvalidSubmit" class="rounded" style="top-blo">
    <p>Error with changing Password</p>
    <button class="btn-outline-primary" @onclick="FailedChange">Close</button>
</dialog>

<dialog Invalid id="Updated" open="@returnSubmit" class="rounded" style="top-blo">
    <p>The Password has been change.</p>
    <button class="btn-outline-primary" @onclick="FailedChange">Return</button>
</dialog>

@code {
    private ChangePasswordModel PasswordChange = new ChangePasswordModel();
    private bool returnSubmit, InvalidSubmit = false;

    public async Task HandleSubmit()
    {
        Loginlogic loginlogic = new Loginlogic();
        var result = await loginlogic.HandleSubmitPost(Http, JS, "Account/UpdatePassword", PasswordChange);


        if (result.IsSuccessStatusCode)
        {
            returnSubmit = true;
        }
        else
        {
            InvalidSubmit = true;
        }
    }


    private void FailedChange()
    {
        InvalidSubmit = !InvalidSubmit;
    }
    private void closesubmit()
    {
        returnSubmit = false;
        NavigationManager.NavigateTo("");
    }

}

