@page "/counter"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@inject IJSRuntime  JS


<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<button class="btn-dark" @onclick="record">record</button>

<button class="btn-dark" @onclick="stoprecord">stop record</button>

<button @onclick="getre">lols</button>
<div>
<b> player</b>
    <a id="urllink">download</a>
</div>
@code {
    private int currentCount = 0;
    private string path = "";
    private dynamic dynamicitem;

    private async Task IncrementCount()
    {
        currentCount++;
        //"counter",
        await JS.InvokeVoidAsync("setLocalStorage", new object[] { "Key", currentCount });

    }

    protected override async Task OnInitializedAsync()
    {
        await SetCounter();
    }

    private async Task record()
    {
        await JS.InvokeVoidAsync("initAudioRecording");
    }

    private async Task getre()
    {
        await JS.InvokeVoidAsync("getMediaRecording");
        //dynamicitem = await JS.InvokeAsync<dynamic>("getMediaRecording");
        StateHasChanged();

    }
    private async Task stoprecord()
    {
        await JS.InvokeVoidAsync("stopRecording");
    }


    private async Task SetCounter()
    {
        var valei = await JS.InvokeAsync<string>("getFromLocalStorage", "Key");
        Console.WriteLine(valei.ToString());
        currentCount = int.Parse(valei);
    }

    public async Task Save()
    {
        await using FileStream fs = new(path, FileMode.Create);


    }

}
